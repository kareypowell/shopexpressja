<?php

namespace App\Services;

use App\Models\User;
use Illuminate\Support\Collection;

class ReportPrivacyService
{
    /**
     * Apply privacy protection to export data
     *
     * @param array $data
     * @param User $user
     * @param string $exportFormat
     * @return array
     */
    public function applyPrivacyProtection(array $data, User $user, string $exportFormat = 'csv'): array
    {
        // Superadmins get unfiltered data
        if ($user->isSuperAdmin()) {
            return $data;
        }

        return array_map(function ($row) use ($user, $exportFormat) {
            return $this->maskRowData($row, $user, $exportFormat);
        }, $data);
    }

    /**
     * Mask sensitive data in a single row
     *
     * @param array $row
     * @param User $user
     * @param string $exportFormat
     * @return array
     */
    protected function maskRowData(array $row, User $user, string $exportFormat): array
    {
        $maskedRow = $row;

        // Define fields that should be masked for different user types
        $maskingRules = $this->getMaskingRules($user);

        foreach ($maskingRules as $field => $shouldMask) {
            if ($shouldMask && isset($maskedRow[$field])) {
                $maskedRow[$field] = $this->getMaskedValue($field, $maskedRow[$field], $exportFormat);
            }
        }

        return $maskedRow;
    }

    /**
     * Get masking rules based on user role
     *
     * @param User $user
     * @return array
     */
    protected function getMaskingRules(User $user): array
    {
        if ($user->isSuperAdmin()) {
            return []; // No masking for superadmins
        }

        if ($user->isAdmin()) {
            return [
                'email' => false,
                'phone' => false,
                'address' => false,
                'account_balance' => true,  // Admins can't see detailed financial info
                'credit_balance' => true,
                'ssn' => true,
                'tax_id' => true,
            ];
        }

        // Default masking for other roles
        return [
            'email' => true,
            'phone' => true,
            'address' => true,
            'account_balance' => true,
            'credit_balance' => true,
            'ssn' => true,
            'tax_id' => true,
        ];
    }

    /**
     * Get masked value for export
     *
     * @param string $field
     * @param mixed $value
     * @param string $exportFormat
     * @return string
     */
    protected function getMaskedValue(string $field, $value, string $exportFormat): string
    {
        if (empty($value)) {
            return '';
        }

        switch ($field) {
            case 'email':
                return $this->maskEmailForExport($value);
            case 'phone':
                return $this->maskPhoneForExport($value);
            case 'address':
                return '[ADDRESS REDACTED]';
            case 'account_balance':
            case 'credit_balance':
                return '[RESTRICTED]';
            case 'ssn':
            case 'tax_id':
                return '[CONFIDENTIAL]';
            default:
                return '[REDACTED]';
        }
    }

    /**
     * Mask email for export
     *
     * @param string $email
     * @return string
     */
    protected function maskEmailForExport(string $email): string
    {
        if (!str_contains($email, '@')) {
            return '[INVALID EMAIL]';
        }

        [$username, $domain] = explode('@', $email, 2);
        
        if (strlen($username) <= 2) {
            return str_repeat('*', strlen($username)) . '@' . $domain;
        }

        return substr($username, 0, 1) . str_repeat('*', strlen($username) - 2) . substr($username, -1) . '@' . $domain;
    }

    /**
     * Mask phone for export
     *
     * @param string $phone
     * @return string
     */
    protected function maskPhoneForExport(string $phone): string
    {
        $cleaned = preg_replace('/[^0-9]/', '', $phone);
        
        if (strlen($cleaned) < 4) {
            return str_repeat('*', strlen($cleaned));
        }

        return str_repeat('*', strlen($cleaned) - 4) . substr($cleaned, -4);
    }

    /**
     * Add privacy notice to export
     *
     * @param string $exportFormat
     * @param User $user
     * @return array
     */
    public function getPrivacyNotice(string $exportFormat, User $user): array
    {
        $notice = [
            'PRIVACY NOTICE',
            'This report contains sensitive information and is subject to data protection regulations.',
            'Distribution of this report should be limited to authorized personnel only.',
            'Generated by: ' . $user->first_name . ' ' . $user->last_name . ' (' . $user->email . ')',
            'Generated at: ' . now()->format('Y-m-d H:i:s T'),
            'User Role: ' . ($user->role->name ?? 'Unknown'),
        ];

        if (!$user->isSuperAdmin()) {
            $notice[] = 'NOTE: Some sensitive data has been masked in accordance with privacy policies.';
        }

        $notice[] = ''; // Empty line separator

        return $notice;
    }

    /**
     * Validate export permissions for sensitive data
     *
     * @param User $user
     * @param array $data
     * @return bool
     */
    public function validateExportPermissions(User $user, array $data): bool
    {
        // Check if data contains sensitive information
        $containsSensitiveData = $this->containsSensitiveData($data);

        if ($containsSensitiveData && !$user->isSuperAdmin()) {
            // Non-superadmins cannot export unmasked sensitive data
            return false;
        }

        return true;
    }

    /**
     * Check if data contains sensitive information
     *
     * @param array $data
     * @return bool
     */
    protected function containsSensitiveData(array $data): bool
    {
        if (empty($data)) {
            return false;
        }

        $sensitiveFields = [
            'email', 'phone', 'address', 'ssn', 'tax_id',
            'account_balance', 'credit_balance'
        ];

        $firstRow = reset($data);
        if (!is_array($firstRow)) {
            return false;
        }

        foreach ($sensitiveFields as $field) {
            if (array_key_exists($field, $firstRow)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Get export disclaimer text
     *
     * @param User $user
     * @param string $reportType
     * @return string
     */
    public function getExportDisclaimer(User $user, string $reportType): string
    {
        $disclaimer = "CONFIDENTIAL REPORT - {$reportType}\n\n";
        $disclaimer .= "This report was generated by {$user->first_name} {$user->last_name} ";
        $roleName = $user->getRoleName() ?: 'Unknown Role';
        $disclaimer .= "({$roleName}) on " . now()->format('F j, Y \a\t g:i A T') . ".\n\n";
        
        if (!$user->isSuperAdmin()) {
            $disclaimer .= "NOTICE: Sensitive data has been masked or restricted in accordance with ";
            $disclaimer .= "data protection policies and user access permissions.\n\n";
        }
        
        $disclaimer .= "This report contains confidential business information. ";
        $disclaimer .= "Unauthorized distribution is prohibited.\n\n";
        
        return $disclaimer;
    }

    /**
     * Apply customer data isolation
     *
     * @param Collection $customers
     * @param User $user
     * @return Collection
     */
    public function applyCustomerDataIsolation(Collection $customers, User $user): Collection
    {
        // Superadmins see all customers
        if ($user->isSuperAdmin()) {
            return $customers;
        }

        // Admins see customers (future: may be filtered by office)
        if ($user->isAdmin()) {
            // Future implementation: filter by office
            return $customers;
        }

        // Customers only see themselves
        if ($user->isCustomer()) {
            return $customers->where('id', $user->id);
        }

        return collect();
    }

    /**
     * Apply office-based restrictions (future implementation)
     *
     * @param Collection $data
     * @param User $user
     * @return Collection
     */
    public function applyOfficeRestrictions(Collection $data, User $user): Collection
    {
        // Future implementation: restrict data by office
        // if (!$user->isSuperAdmin() && $user->office_id) {
        //     return $data->where('office_id', $user->office_id);
        // }

        return $data;
    }

    /**
     * Sanitize data for specific export format
     *
     * @param array $data
     * @param string $format
     * @return array
     */
    public function sanitizeForExport(array $data, string $format): array
    {
        switch (strtolower($format)) {
            case 'csv':
                return $this->sanitizeForCsv($data);
            case 'pdf':
                return $this->sanitizeForPdf($data);
            default:
                return $data;
        }
    }

    /**
     * Sanitize data for CSV export
     *
     * @param array $data
     * @return array
     */
    protected function sanitizeForCsv(array $data): array
    {
        return array_map(function ($row) {
            return array_map(function ($value) {
                // Remove potential CSV injection characters
                if (is_string($value) && strlen($value) > 0) {
                    $firstChar = substr($value, 0, 1);
                    if (in_array($firstChar, ['=', '+', '-', '@'])) {
                        return "'" . $value; // Prefix with single quote to prevent injection
                    }
                }
                return $value;
            }, $row);
        }, $data);
    }

    /**
     * Sanitize data for PDF export
     *
     * @param array $data
     * @return array
     */
    protected function sanitizeForPdf(array $data): array
    {
        return array_map(function ($row) {
            return array_map(function ($value) {
                // Escape HTML entities for PDF generation
                return is_string($value) ? htmlspecialchars($value, ENT_QUOTES, 'UTF-8') : $value;
            }, $row);
        }, $data);
    }
}