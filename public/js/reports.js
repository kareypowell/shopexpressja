/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/reports.js":
/*!*********************************!*\
  !*** ./resources/js/reports.js ***!
  \*********************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Reports Dashboard JavaScript\nvar ReportsDashboard = /*#__PURE__*/function () {\n  function ReportsDashboard() {\n    _classCallCheck(this, ReportsDashboard);\n    this.charts = new Map();\n    this.autoRefreshInterval = null;\n    this.init();\n  }\n  return _createClass(ReportsDashboard, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n      document.addEventListener('DOMContentLoaded', function () {\n        _this.setupEventListeners();\n      });\n    }\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this2 = this;\n      // Listen for Livewire events\n      if (typeof Livewire !== 'undefined') {\n        // Chart data loaded event\n        Livewire.on('chartDataLoaded', function (chartData) {\n          _this2.renderChart(chartData);\n        });\n\n        // Auto-refresh events\n        window.addEventListener('startAutoRefresh', function (event) {\n          _this2.startAutoRefresh(event.detail.interval);\n        });\n        window.addEventListener('stopAutoRefresh', function () {\n          _this2.stopAutoRefresh();\n        });\n\n        // File download event\n        window.addEventListener('downloadFile', function (event) {\n          _this2.downloadFile(event.detail.url, event.detail.filename);\n        });\n\n        // Export polling event\n        window.addEventListener('startExportPolling', function (event) {\n          _this2.startExportPolling(event.detail.interval);\n        });\n\n        // Notification events\n        window.addEventListener('notify', function (event) {\n          _this2.showNotification(event.detail.type, event.detail.message);\n        });\n      }\n\n      // Cleanup on page unload\n      window.addEventListener('beforeunload', function () {\n        _this2.cleanup();\n      });\n    }\n  }, {\n    key: \"renderChart\",\n    value: function renderChart(chartData) {\n      var canvas = document.getElementById('report-main-chart');\n      if (!canvas || !chartData) return;\n      var ctx = canvas.getContext('2d');\n\n      // Destroy existing chart\n      if (this.charts.has('main')) {\n        this.charts.get('main').destroy();\n      }\n\n      // Create new chart based on type\n      var config = this.getChartConfig(chartData);\n      var chart = new Chart(ctx, config);\n      this.charts.set('main', chart);\n    }\n  }, {\n    key: \"renderComponentChart\",\n    value: function renderComponentChart(chartId, chartData) {\n      var _this3 = this;\n      var canvas = document.getElementById(chartId);\n      if (!canvas || !chartData) return;\n      var ctx = canvas.getContext('2d');\n\n      // Destroy existing chart\n      if (this.charts.has(chartId)) {\n        this.charts.get(chartId).destroy();\n      }\n      if (chartData && chartData.data) {\n        var chart = new Chart(ctx, {\n          type: chartData.type,\n          data: chartData.data,\n          options: _objectSpread(_objectSpread({\n            responsive: true,\n            maintainAspectRatio: false\n          }, chartData.options), {}, {\n            onClick: function onClick(event, elements) {\n              _this3.handleChartClick(chartId, chartData.type, elements, chart);\n            }\n          })\n        });\n        this.charts.set(chartId, chart);\n      }\n    }\n  }, {\n    key: \"handleChartClick\",\n    value: function handleChartClick(chartId, chartType, elements, chart) {\n      var _this4 = this;\n      if (elements.length > 0) {\n        var index = elements[0].index;\n\n        // Determine which Livewire component to call based on chart ID\n        var componentCall = null;\n        if (chartId.includes('collectionsChart')) {\n          if (chartType === 'doughnut') {\n            var label = chart.data.labels[index];\n            componentCall = function componentCall() {\n              return Livewire.find(_this4.getComponentId(chartId)).call('handleDrillDown', {\n                type: label.toLowerCase()\n              });\n            };\n          } else if (chartType === 'line' || chartType === 'bar') {\n            var period = chart.data.labels[index];\n            componentCall = function componentCall() {\n              return Livewire.find(_this4.getComponentId(chartId)).call('handleDrillDown', {\n                period: period\n              });\n            };\n          }\n        } else if (chartId.includes('manifestPerformanceChart')) {\n          if (chartType === 'doughnut') {\n            var type = chart.data.labels[index];\n            componentCall = function componentCall() {\n              return Livewire.find(_this4.getComponentId(chartId)).call('handleDrillDown', {\n                manifest_type: type\n              });\n            };\n          } else if (chartType === 'line' || chartType === 'bar') {\n            var _period = chart.data.labels[index];\n            componentCall = function componentCall() {\n              return Livewire.find(_this4.getComponentId(chartId)).call('handleDrillDown', {\n                period: _period\n              });\n            };\n          }\n        } else if (chartId.includes('financialAnalyticsChart')) {\n          if (chartType === 'doughnut') {\n            var service = chart.data.labels[index];\n            componentCall = function componentCall() {\n              return Livewire.find(_this4.getComponentId(chartId)).call('handleDrillDown', {\n                service_type: service\n              });\n            };\n          } else if (chartType === 'scatter') {\n            var dataIndex = elements[0].index;\n            var customerId = chart.data.datasets[0].data[dataIndex].customer_id;\n            componentCall = function componentCall() {\n              return Livewire.find(_this4.getComponentId(chartId)).call('handleDrillDown', {\n                customer_id: customerId\n              });\n            };\n          }\n        }\n        if (componentCall) {\n          componentCall();\n        }\n      }\n    }\n  }, {\n    key: \"getComponentId\",\n    value: function getComponentId(chartId) {\n      // Extract component ID from chart ID\n      return chartId.replace(/Chart.*$/, '');\n    }\n  }, {\n    key: \"getChartConfig\",\n    value: function getChartConfig(chartData) {\n      var baseConfig = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          tooltip: {\n            mode: 'index',\n            intersect: false\n          }\n        },\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: chartData.xAxisLabel || 'Date'\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: chartData.yAxisLabel || 'Value'\n            }\n          }\n        }\n      };\n      switch (chartData.type) {\n        case 'collections':\n          return {\n            type: 'line',\n            data: chartData.data,\n            options: _objectSpread(_objectSpread({}, baseConfig), {}, {\n              interaction: {\n                mode: 'nearest',\n                axis: 'x',\n                intersect: false\n              }\n            })\n          };\n        case 'manifest_performance':\n          return {\n            type: 'bar',\n            data: chartData.data,\n            options: baseConfig\n          };\n        case 'customer_analytics':\n          return {\n            type: 'doughnut',\n            data: chartData.data,\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  position: 'right'\n                }\n              }\n            }\n          };\n        case 'financial_summary':\n          return {\n            type: 'bar',\n            data: chartData.data,\n            options: _objectSpread(_objectSpread({}, baseConfig), {}, {\n              scales: _objectSpread(_objectSpread({}, baseConfig.scales), {}, {\n                y: _objectSpread(_objectSpread({}, baseConfig.scales.y), {}, {\n                  beginAtZero: true\n                })\n              })\n            })\n          };\n        default:\n          return {\n            type: 'line',\n            data: chartData.data,\n            options: baseConfig\n          };\n      }\n    }\n  }, {\n    key: \"startAutoRefresh\",\n    value: function startAutoRefresh(interval) {\n      if (this.autoRefreshInterval) {\n        clearInterval(this.autoRefreshInterval);\n      }\n      this.autoRefreshInterval = setInterval(function () {\n        // Find the report dashboard component and call refresh\n        var dashboardComponent = document.querySelector('[wire\\\\:id]');\n        if (dashboardComponent && typeof Livewire !== 'undefined') {\n          var componentId = dashboardComponent.getAttribute('wire:id');\n          Livewire.find(componentId).call('refreshReport');\n        }\n      }, interval);\n    }\n  }, {\n    key: \"stopAutoRefresh\",\n    value: function stopAutoRefresh() {\n      if (this.autoRefreshInterval) {\n        clearInterval(this.autoRefreshInterval);\n        this.autoRefreshInterval = null;\n      }\n    }\n  }, {\n    key: \"downloadFile\",\n    value: function downloadFile(url, filename) {\n      var link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }, {\n    key: \"startExportPolling\",\n    value: function startExportPolling(interval) {\n      if (this.exportPollingInterval) {\n        clearInterval(this.exportPollingInterval);\n      }\n      this.exportPollingInterval = setInterval(function () {\n        // Find the export component and refresh active exports\n        var exportComponent = document.querySelector('[wire\\\\:id*=\"report-exporter\"]');\n        if (exportComponent && typeof Livewire !== 'undefined') {\n          var componentId = exportComponent.getAttribute('wire:id');\n          Livewire.find(componentId).call('refreshActiveExports');\n        }\n      }, interval);\n    }\n  }, {\n    key: \"showNotification\",\n    value: function showNotification(type, message) {\n      console.log(\"\".concat(type, \": \").concat(message));\n      // You can integrate with your notification system here\n      if (typeof toastr !== 'undefined') {\n        toastr[type](message);\n      }\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      // Clear intervals\n      if (this.autoRefreshInterval) {\n        clearInterval(this.autoRefreshInterval);\n      }\n      if (this.exportPollingInterval) {\n        clearInterval(this.exportPollingInterval);\n      }\n\n      // Destroy all charts\n      this.charts.forEach(function (chart) {\n        if (chart) {\n          chart.destroy();\n        }\n      });\n      this.charts.clear();\n    }\n\n    // Public method to initialize charts from components\n  }, {\n    key: \"initChart\",\n    value: function initChart(chartId, chartData) {\n      var _this5 = this;\n      setTimeout(function () {\n        _this5.renderComponentChart(chartId, chartData);\n      }, 100);\n    }\n\n    // Public method to reinitialize charts on component updates\n  }, {\n    key: \"reinitChart\",\n    value: function reinitChart(chartId, chartData) {\n      var _this6 = this;\n      setTimeout(function () {\n        _this6.renderComponentChart(chartId, chartData);\n      }, 200);\n    }\n  }]);\n}(); // Initialize the reports dashboard\nwindow.reportsDashboard = new ReportsDashboard();\n\n// Expose methods for Livewire components\nwindow.initReportChart = function (chartId, chartData) {\n  window.reportsDashboard.initChart(chartId, chartData);\n};\nwindow.reinitReportChart = function (chartId, chartData) {\n  window.reportsDashboard.reinitChart(chartId, chartData);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/reports.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/reports.js"]();
/******/ 	
/******/ })()
;